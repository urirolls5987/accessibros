/**
 * Accessibility Widget Initialization Script
 * This script manages the state and behavior of an accessibility widget for font sizes, 
 * color adjustments, tools, and various content settings using cookies to store user preferences.
 */
document.addEventListener("DOMContentLoaded", function () {
  
  // Global state object to hold widget settings
  let widgetState = { states: {} };

  /**
   * Save state to cookie
   */
  const saveStateToCookie = function () {
    const setCookie = function (stateObject) {
      const expirationDate = new Date();
      expirationDate.setTime(expirationDate.getTime() + NaN); // Invalid expiration time - needs adjustment
      const expires = "expires=" + expirationDate.toUTCString();
      document.cookie = "accessibility_widget=" + JSON.stringify(stateObject) + ";" + expires + ";path=/";
    };
    setCookie(widgetState);
  };

  /**
   * Load state from cookie
   * @returns {Object} Parsed widget state from cookie
   */
  const loadStateFromCookie = (function () {
    const cookieName = "accessibility_widget=";
    const cookies = decodeURIComponent(document.cookie).split(";");

    for (let i = 0; i < cookies.length; i++) {
      let cookie = cookies[i].trim();
      if (cookie.indexOf(cookieName) === 0) {
        return JSON.parse(cookie.substring(cookieName.length, cookie.length));
      }
    }
    return {};
  })();

  // Try loading saved state from cookies
  try {
    widgetState = { states: {}, ...loadStateFromCookie };
  } catch (error) {
    console.error("Failed to parse state from cookie:", error);
  }

  // Available widget button configurations
  const buttonIcons = ["format_size", "add", "remove", "restart_alt", "close"];
  
  /**
   * Generate button HTML for widget
   * @param {Array} buttons - List of button configurations
   * @param {String} className - Additional class to add to each button
   * @returns {String} HTML for the buttons
   */
  const generateButtons = function (buttons, className = "") {
    let buttonHTML = "";
    
    for (let i = 0; i < buttons.length; i++) {
      const { label, key, icon } = buttons[i];
      const isSelected = widgetState.states[key];
      
      buttonHTML += `
        <div class="asw-btn ${className} ${isSelected ? 'asw-selected' : ''}" 
             role="button" aria-pressed="${isSelected ? 'true' : 'false'}" 
             data-key="${key}" title="${label}">
          <span class="material-icons">${icon}</span>${label}
        </div>`;
        
      buttonIcons.push(icon);
    }
    
    return buttonHTML;
  };

  // Button sets for different sections
  const contentAdjustmentButtons = generateButtons([
    { label: "Readable Font", key: "readable-font", icon: "local_parking" },
    { label: "Highlight Links", key: "highlight-links", icon: "link" },
    { label: "Highlight Title", key: "highlight-title", icon: "title" },
  ]);

  const colorAdjustmentButtons = generateButtons([
    { label: "Monochrome", key: "monochrome", icon: "filter_b_and_w" },
    { label: "Low Saturation", key: "low-saturation", icon: "gradient" },
    { label: "High Saturation", key: "high-saturation", icon: "filter_vintage" },
    { label: "High Contrast", key: "high-contrast", icon: "tonality" },
    { label: "Light Contrast", key: "light-contrast", icon: "brightness_5" },
    { label: "Dark Contrast", key: "dark-contrast", icon: "nightlight" },
  ], "asw-filter");

  const toolButtons = generateButtons([
    { label: "Big Cursor", key: "big-cursor", icon: "mouse" },
    { label: "Stop Animations", key: "stop-animations", icon: "motion_photos_off" },
    { label: "Reading Guide", key: "readable-guide", icon: "local_library" },
  ], "asw-tools");

  // Create widget container element and append HTML content
  const widgetContainer = document.createElement("div");
  widgetContainer.innerHTML = `
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons&text=${buttonIcons.join(',')}" rel="stylesheet">
    <style>
      /* Accessibility Widget Styles */
      /* Add widget styles here */
    </style>
    <div class="asw-widget">
      <!-- Widget Toggle Button -->
      <div class="asw-menu-btn" title="Open Accessibility Menu" role="button" aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="34" height="34">
          <path d="M0 0h24v24H0V0z" fill="none"/>
          <path d="M20.5 6c-2.61.7-5.67 1-8.5 1s-5.89-.3-8.5-1L3 8c1.86.5 4 .83 6 1v13h2v-6h2v6h2V9c2-.17 4.14-.5 6-1l-.5-2zM12 6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/>
        </svg>
      </div>
      <!-- Main Menu -->
      <div class="asw-menu">
        <div class="asw-menu-header">
          Accessibility Menu
          <div>
            <div class="asw-menu-reset" role="button" title="Reset Settings"><span class="material-icons">restart_alt</span></div>
            <div class="asw-menu-close" role="button" title="Close Accessibility Menu"><span class="material-icons">close</span></div>
          </div>
        </div>
        <div class="asw-menu-content">
          <!-- Content Adjustments -->
          <div class="asw-card" style="margin-top: 15px;">
            <div class="asw-card-title">Content Adjustments</div>
            <div class="asw-adjust-font">
              <div class="label"><span class="material-icons">format_size</span>Adjust Font Size</div>
              <div>
                <div class="asw-minus" data-key="font-size" role="button" aria-pressed="false"><span class="material-icons">remove</span></div>
                <div class="asw-amount">${widgetState.states.fontSize ? parseInt(100 * widgetState.states.fontSize) + "%" : "Default"}</div>
                <div class="asw-plus" data-key="font-size" role="button" aria-pressed="false"><span class="material-icons">add</span></div>
              </div>
            </div>
            <div class="asw-items">${contentAdjustmentButtons}</div>
          </div>
          <!-- Color Adjustments -->
          <div class="asw-card" style="margin-top: 15px;">
            <div class="asw-card-title">Color Adjustments</div>
            <div class="asw-items">${colorAdjustmentButtons}</div>
          </div>
          <!-- Tools -->
          <div class="asw-card" style="margin-top: 15px;">
            <div class="asw-card-title">Tools</div>
            <div class="asw-items">${toolButtons}</div>
          </div>
        </div>
        <div class="asw-footer">
          <a href="#">Brightways</a>
        </div>
      </div>
      <div class="asw-overlay"></div>
    </div>
  `;

  /**
   * Add or update a stylesheet in the document
   * @param {String} styles - The styles to be added
   * @param {String} id - The id for the stylesheet element
   */
  const addOrUpdateStyleSheet = function (styles, id) {
    let styleElement = document.getElementById(id) || document.createElement("style");
    styleElement.innerHTML = styles;
    if (!styleElement.id) {
      styleElement.id = id;
      document.head.appendChild(styleElement);
    }
  };

  /**
   * Apply CSS filters based on the selected contrast mode
   * @param {String} mode - The contrast mode key
   */
  const applyCSSFilters = function (mode) {
    let styles = "";
    let filterCSS = "";

    // Set appropriate filters based on the mode
    switch (mode) {
      case "dark-contrast":
        filterCSS = "color: #fff !important; background-color: #000 !important;";
        break;
      case "light-contrast":
        filterCSS = "color: #000 !important; background-color: #FFF !important;";
        break;
      case "high-contrast":
        filterCSS = "contrast(125%);";
        break;
      case "high-saturation":
        filterCSS = "saturate(200%);";
        break;
      case "low-saturation":
        filterCSS = "saturate(50%);";
        break;
      case "monochrome":
        filterCSS = "grayscale(100%);";
        break;
      default:
        filterCSS = "";
    }

    // If the mode is one of the contrast modes, apply the corresponding styles
    if (mode === "dark-contrast" || mode === "light-contrast") {
      styles = `html, body { ${filterCSS} }`;
    }

    addOrUpdateStyleSheet(styles, "contrast-stylesheet");
  };

  /**
   * Handle button click events in the widget
   * @param {Event} event - The click event
   */
  const handleButtonClick = function (event) {
    event.preventDefault();
    const button = event.currentTarget;
    const key = button.getAttribute("data-key");

    // Toggle states and update UI accordingly
    if (button.classList.contains("asw-filter")) {
      // Handle contrast-related actions
      document.querySelectorAll(".asw-filter").forEach(btn => {
        btn.classList.remove("asw-selected");
        btn.setAttribute("aria-pressed", "false");
      });
      
      widgetState.states.contrast = widgetState.states.contrast !== key && key;
      
      if (widgetState.states.contrast) {
        button.classList.add("asw-selected");
        button.setAttribute("aria-pressed", "true");
      }

      applyCSSFilters(widgetState.states.contrast);
      
    } else {
      // Handle other widget actions (font size, big cursor, etc.)
      widgetState.states[key] = !widgetState.states[key];
      button.classList.toggle("asw-selected", widgetState.states[key]);
      button.setAttribute("aria-pressed", widgetState.states[key] ? "true" : "false");
    }

    // Save the updated state to the cookie
    saveStateToCookie();
  };

  // Attach event listeners to widget elements (menu toggle, buttons, etc.)
  const menuButton = widgetContainer.querySelector(".asw-menu-btn");
  const overlay = widgetContainer.querySelector(".asw-overlay");
  const menu = widgetContainer.querySelector(".asw-menu");
  const resetButton = widgetContainer.querySelector(".asw-menu-reset");
  const closeButton = widgetContainer.querySelector(".asw-menu-close");

  menuButton.addEventListener("click", function () {
    const isMenuOpen = menu.style.display === "block";
    menu.style.display = isMenuOpen ? "none" : "block";
    overlay.style.display = isMenuOpen ? "none" : "block";
  });

  closeButton.addEventListener("click", function () {
    menu.style.display = "none";
    overlay.style.display = "none";
  });

  overlay.addEventListener("click", function () {
    menu.style.display = "none";
    overlay.style.display = "none";
  });

  resetButton.addEventListener("click", function () {
    widgetState.states = {};
    applyCSSFilters();
    saveStateToCookie();
  });

  // Initialize the widget on page load with stored settings
  document.body.appendChild(widgetContainer);
  if (widgetState.states.contrast) {
    applyCSSFilters(widgetState.states.contrast);
  }
  
});
