document.addEventListener("DOMContentLoaded", function () {
  // Initial state object
  let state = { states: {} };

  /**
   * Save the state object to cookies
   */
  const saveState = function () {
    const expiryDate = new Date();
    expiryDate.setTime(expiryDate.getTime() + NaN); // Placeholder for expiry time
    const expires = "expires=" + expiryDate.toUTCString();
    document.cookie = "asw=" + JSON.stringify(state) + ";" + expires + ";path=/";
  };

  /**
   * Load state from cookies and initialize the state object
   */
  const loadState = function () {
    let cookieData = "asw=",
      cookies = decodeURIComponent(document.cookie).split(";");

    for (let i = 0; i < cookies.length; i++) {
      let c = cookies[i].trim();
      if (c.indexOf(cookieData) == 0) return c.substring(cookieData.length, c.length);
    }
    return "";
  };

  let savedState = loadState();
  try {
    savedState = JSON.parse(savedState);
  } catch (error) {
    savedState = {};
  }

  state = { states: {}, ...savedState };

  const icons = ["format_size", "add", "remove", "restart_alt", "close"];

  /**
   * Generate buttons for accessibility options
   * @param {Array} options Array of button objects with label, key, and icon
   * @param {String} additionalClass Additional class to be added to the buttons
   * @returns {String} HTML string of the buttons
   */
  const generateButtons = function (options, additionalClass = "") {
    return options
      .map((option) => {
        const isSelected = state.states[option.key] || false;
        return `
          <div class="asw-btn ${additionalClass} ${isSelected ? "asw-selected" : ""}" role="button" aria-pressed="${isSelected}" data-key="${option.key}" title="${option.label}">
            <span class="material-icons">${option.icon}</span>
            ${option.label}
          </div>
        `;
      })
      .join("");
  };

  // Accessibility menu content
  const contentAdjustmentsHTML = generateButtons([
    { label: "Readable Font", key: "readable-font", icon: "local_parking" },
    { label: "Highlight Links", key: "highlight-links", icon: "link" },
    { label: "Highlight Title", key: "highlight-title", icon: "title" },
  ]);

  const colorAdjustmentsHTML = generateButtons(
    [
      { label: "Monochrome", key: "monochrome", icon: "filter_b_and_w" },
      { label: "Low Saturation", key: "low-saturation", icon: "gradient" },
      { label: "High Saturation", key: "high-saturation", icon: "filter_vintage" },
      { label: "High Contrast", key: "high-contrast", icon: "tonality" },
      { label: "Light Contrast", key: "light-contrast", icon: "brightness_5" },
      { label: "Dark Contrast", key: "dark-contrast", icon: "nightlight" },
    ],
    "asw-filter"
  );

  const toolsHTML = generateButtons(
    [
      { label: "Big Cursor", key: "big-cursor", icon: "mouse" },
      { label: "Stop Animations", key: "stop-animations", icon: "motion_photos_off" },
      { label: "Reading Guide", key: "readable-guide", icon: "local_library" },
    ],
    "asw-tools"
  );

  // Create and insert the accessibility widget into the DOM
  const widgetContainer = document.createElement("div");
  widgetContainer.innerHTML = `
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons&text=${icons.join(
      ","
    )}" rel="stylesheet">
    <style>${generateCSS()}</style>
    <div class="asw-widget">
      <div class="asw-menu-btn" title="Open Accessibility Menu" role="button" aria-expanded="false">
        <span class="material-icons">accessibility</span>
      </div>
      <div class="asw-menu">
        <div class="asw-menu-header">
          <span>Accessibility Menu</span>
          <div>
            <div role="button" class="asw-menu-reset" title="Reset Settings">
              <span class="material-icons">restart_alt</span>
            </div>
            <div role="button" class="asw-menu-close" title="Close Accessibility Menu">
              <span class="material-icons">close</span>
            </div>
          </div>
        </div>
        <div class="asw-menu-content">
          <div class="asw-card">
            <div class="asw-card-title">Content Adjustments</div>
            <div class="asw-adjust-font">
              <div class="label">
                <span class="material-icons">format_size</span> Adjust Font Size
              </div>
              <div class="asw-font-adjust-buttons">
                <div class="asw-minus" data-key="font-size" role="button"><span class="material-icons">remove</span></div>
                <div class="asw-amount">${state.states.fontSize || "Default"}</div>
                <div class="asw-plus" data-key="font-size" role="button"><span class="material-icons">add</span></div>
              </div>
            </div>
            <div class="asw-items">${contentAdjustmentsHTML}</div>
          </div>
          <div class="asw-card">
            <div class="asw-card-title">Color Adjustments</div>
            <div class="asw-items">${colorAdjustmentsHTML}</div>
          </div>
          <div class="asw-card">
            <div class="asw-card-title">Tools</div>
            <div class="asw-items">${toolsHTML}</div>
          </div>
        </div>
        <div class="asw-footer">
          <a href="#">Brightways</a>
        </div>
      </div>
      <div class="asw-overlay"></div>
    </div>
  `;
  
  // Append the widget to the body
  document.body.appendChild(widgetContainer);

  // Event Listeners for menu interactions
  setupEventListeners();

  // Initialize based on saved state
  applyState();
});

/**
 * Function to dynamically generate and manage the CSS of the accessibility widget
 * @returns {String} CSS for the widget
 */
function generateCSS() {
  return `
    .asw-menu, .asw-menu-btn { position: fixed; left: 20px; transition: .3s; z-index: 500000; }
    .asw-menu-btn { bottom: 20px; background: #0048ff; border-radius: 50%; align-items: center; justify-content: center; width: 64px; height: 64px; display: flex; cursor: pointer; }
    .asw-menu-btn:hover { transform: scale(1.05); }
    .asw-menu { display: none; top: 20px; border-radius: 8px; background: #fff; width: 500px; height: calc(100vh - 40px - 75px); }
    .asw-menu-header { background: #0334b1; color: #fff; padding: 12px; display: flex; justify-content: space-between; }
    .asw-btn { width: 140px; height: 120px; border-radius: 8px; padding: 15px; background: #ecf3ff; transition: background-color .3s; cursor: pointer; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; }
    .asw-btn:hover { border-color: #0048ff; }
    .asw-btn.asw-selected { background: #0048ff; color: #fff; }
    .asw-footer { background: #0334b1; color: #fff; padding: 16px; text-align: center; }
    .asw-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 10000; }
  `;
}

/**
 * Setup event listeners for accessibility widget buttons and menu
 */
function setupEventListeners() {
  const widgetContainer = document.querySelector(".asw-widget");
  const menuBtn = widgetContainer.querySelector(".asw-menu-btn");
  const menu = widgetContainer.querySelector(".asw-menu");
  const overlay = widgetContainer.querySelector(".asw-overlay");

  // Toggle menu visibility
  menuBtn.addEventListener("click", () => {
    const isVisible = menu.style.display === "block";
    menu.style.display = isVisible ? "none" : "block";
    overlay.style.display = menu.style.display;
  });

  // Close menu and overlay on close button click
  widgetContainer.querySelector(".asw-menu-close").addEventListener("click", () => {
    menu.style.display = "none";
    overlay.style.display = "none";
  });

  // Close menu when clicking on the overlay
  overlay.addEventListener("click", () => {
    menu.style.display = "none";
    overlay.style.display = "none";
  });

  // Reset settings
  widgetContainer.querySelector(".asw-menu-reset").addEventListener("click", resetSettings);

  // Add event listeners to accessibility buttons
  widgetContainer.querySelectorAll(".asw-btn").forEach((btn) => {
    btn.addEventListener("click", handleBtnClick);
  });

  // Adjust font size
  widgetContainer.querySelectorAll(".asw-adjust-font div[role='button']").forEach((btn) => {
    btn.addEventListener("click", adjustFontSize);
  });
}

/**
 * Apply the saved state to the webpage elements
 */
function applyState() {
  // Update the UI and apply any styles based on the saved state
}

/**
 * Reset settings to default
 */
function resetSettings() {
  // Code to reset the state and UI
}

/**
 * Handle button clicks for accessibility features
 */
function handleBtnClick(event) {
  // Code to toggle accessibility features on/off
}

/**
 * Adjust font size based on user interaction
 */
function adjustFontSize(event) {
  // Code to adjust font size
}
