// Accessibility Widget v2.0
// Reorganized structure with preserved functionality

const AccessibilityWidget = {
  config: {
    cookieName: 'a11y_prefs',
    expiryDays: 365,
    fontSizeStep: 0.1,
    fontSizeMin: 0.1,
    fontSizeMax: 2
  },

  state: {
    fontSize: 1,
    contrast: null,
    features: {}
  },

  init() {
    this.loadPreferences();
    this.createWidgetUI();
    this.applyPreferences();
    this.attachEventListeners();
  },

  // Utility Functions
  setCookie(value) {
    const date = new Date();
    date.setTime(date.getTime() + (this.config.expiryDays * 24 * 60 * 60 * 1000));
    document.cookie = `${this.config.cookieName}=${JSON.stringify(value)};expires=${date.toUTCString()};path=/`;
  },

  getCookie() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
      const [name, value] = cookie.split('=').map(c => c.trim());
      if (name === this.config.cookieName) {
        return JSON.parse(value);
      }
    }
    return null;
  },

  loadPreferences() {
    const savedPrefs = this.getCookie();
    if (savedPrefs) {
      this.state = { ...this.state, ...savedPrefs };
    }
  },

  savePreferences() {
    this.setCookie(this.state);
  },

  // UI Creation
  createWidgetUI() {
    const widgetHTML = `
      <div id="a11y-widget" class="a11y-widget">
        <button id="a11y-toggle" class="a11y-toggle" aria-label="Accessibility Options">
          <svg viewBox="0 0 24 24" width="24" height="24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-10h2v5h-2zm0-5h2v2h-2z"/>
          </svg>
        </button>
        <div id="a11y-menu" class="a11y-menu">
          <div class="a11y-option">
            <label>Font Size</label>
            <div class="a11y-font-controls">
              <button id="a11y-font-decrease" class="a11y-btn">A-</button>
              <span id="a11y-font-size">Default</span>
              <button id="a11y-font-increase" class="a11y-btn">A+</button>
            </div>
          </div>
          <div class="a11y-option">
            <label>Contrast</label>
            <div class="a11y-contrast-controls">
              <button id="a11y-contrast-default" class="a11y-btn">Default</button>
              <button id="a11y-contrast-light" class="a11y-btn">Light</button>
              <button id="a11y-contrast-dark" class="a11y-btn">Dark</button>
            </div>
          </div>
          <div class="a11y-features">
            <button id="a11y-readable-font" class="a11y-btn" data-feature="readableFont">Readable Font</button>
            <button id="a11y-highlight-links" class="a11y-btn" data-feature="highlightLinks">Highlight Links</button>
            <button id="a11y-highlight-titles" class="a11y-btn" data-feature="highlightTitles">Highlight Titles</button>
          </div>
          <button id="a11y-reset" class="a11y-btn a11y-reset">Reset All</button>
        </div>
      </div>
    `;

    const widgetStyles = `
      .a11y-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 9999;
        font-family: Arial, sans-serif;
      }
      .a11y-toggle {
        background: #4A90E2;
        border: none;
        border-radius: 50%;
        color: white;
        cursor: pointer;
        height: 50px;
        width: 50px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      }
      .a11y-menu {
        display: none;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        padding: 15px;
        position: absolute;
        bottom: 60px;
        right: 0;
        width: 250px;
      }
      .a11y-option {
        margin-bottom: 10px;
      }
      .a11y-btn {
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        margin: 2px;
        padding: 5px 10px;
      }
      .a11y-btn.active {
        background: #4A90E2;
        color: white;
      }
      .a11y-reset {
        display: block;
        width: 100%;
        margin-top: 10px;
      }
    `;

    const styleElement = document.createElement('style');
    styleElement.textContent = widgetStyles;
    document.head.appendChild(styleElement);

    const widgetContainer = document.createElement('div');
    widgetContainer.innerHTML = widgetHTML;
    document.body.appendChild(widgetContainer);
  },

  // Event Listeners
  attachEventListeners() {
    document.getElementById('a11y-toggle').addEventListener('click', () => {
      const menu = document.getElementById('a11y-menu');
      menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    });

    document.getElementById('a11y-font-decrease').addEventListener('click', () => this.adjustFontSize('decrease'));
    document.getElementById('a11y-font-increase').addEventListener('click', () => this.adjustFontSize('increase'));

    document.getElementById('a11y-contrast-default').addEventListener('click', () => this.setContrast(null));
    document.getElementById('a11y-contrast-light').addEventListener('click', () => this.setContrast('light-contrast'));
    document.getElementById('a11y-contrast-dark').addEventListener('click', () => this.setContrast('dark-contrast'));

    document.querySelectorAll('.a11y-features .a11y-btn').forEach(btn => {
      btn.addEventListener('click', (e) => this.toggleFeature(e.target.dataset.feature));
    });

    document.getElementById('a11y-reset').addEventListener('click', () => this.resetAll());
  },

  // Core Functionality
  adjustFontSize(direction) {
    const newSize = direction === 'increase'
      ? Math.min(this.state.fontSize + this.config.fontSizeStep, this.config.fontSizeMax)
      : Math.max(this.state.fontSize - this.config.fontSizeStep, this.config.fontSizeMin);
    
    this.state.fontSize = parseFloat(newSize.toFixed(2));
    this.applyFontSize();
    this.savePreferences();
  },

  applyFontSize() {
    document.querySelectorAll('body, body *').forEach(el => {
      if (!el.classList.contains('material-icons')) {
        const originalSize = el.getAttribute('data-original-font-size') || window.getComputedStyle(el).fontSize;
        el.setAttribute('data-original-font-size', originalSize);
        el.style.fontSize = `calc(${originalSize} * ${this.state.fontSize})`;
      }
    });

    const displaySize = this.state.fontSize === 1 ? 'Default' : `${Math.round(this.state.fontSize * 100)}%`;
    document.getElementById('a11y-font-size').textContent = displaySize;
  },

  setContrast(type) {
    if (this.state.contrast) {
      document.documentElement.classList.remove(this.state.contrast);
    }
    this.state.contrast = type;
    if (type) {
      document.documentElement.classList.add(type);
    }
    this.updateContrastButtons();
    this.savePreferences();
  },

  updateContrastButtons() {
    const buttons = ['default', 'light', 'dark'];
    buttons.forEach(btn => {
      const element = document.getElementById(`a11y-contrast-${btn}`);
      element.classList.toggle('active', this.state.contrast === `${btn}-contrast` || (!this.state.contrast && btn === 'default'));
    });
  },

  toggleFeature(feature) {
    this.state.features[feature] = !this.state.features[feature];
    document.documentElement.classList.toggle(feature, this.state.features[feature]);
    document.getElementById(`a11y-${feature.replace(/([A-Z])/g, '-$1').toLowerCase()}`).classList.toggle('active', this.state.features[feature]);
    this.savePreferences();
  },

  resetAll() {
    this.state = {
      fontSize: 1,
      contrast: null,
      features: {}
    };
    this.applyPreferences();
    this.savePreferences();
  },

  applyPreferences() {
    this.applyFontSize();
    this.setContrast(this.state.contrast);
    Object.keys(this.state.features).forEach(feature => {
      document.documentElement.classList.toggle(feature, this.state.features[feature]);
      const btn = document.getElementById(`a11y-${feature.replace(/([A-Z])/g, '-$1').toLowerCase()}`);
      if (btn) btn.classList.toggle('active', this.state.features[feature]);
    });
  }
};

// Initialize the widget
document.addEventListener('DOMContentLoaded', () => {
  AccessibilityWidget.init();
});