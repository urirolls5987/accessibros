window.addEventListener("load", function() {
  let globalSettings = { preferences: {} };
  
  const savePreferences = function() {
    const expirationDate = new Date();
    expirationDate.setTime(expirationDate.getTime() + NaN);
    const cookieString = "preferences=" + JSON.stringify(globalSettings) + ";expires=" + expirationDate.toUTCString() + ";path=/";
    document.cookie = cookieString;
  };

  let storedPreferences = (function() {
    const cookies = decodeURIComponent(document.cookie).split(';');
    for (let i = 0; i < cookies.length; i++) {
      let cookie = cookies[i].trim();
      if (cookie.indexOf("preferences=") === 0) {
        return cookie.substring("preferences=".length, cookie.length);
      }
    }
    return "";
  })();

  try {
    storedPreferences = JSON.parse(storedPreferences);
  } catch (error) {
    storedPreferences = {};
  }

  globalSettings = { preferences: {}, ...storedPreferences };

  const iconSet = ["format_size", "add", "remove", "restart_alt", "close"];

  const generateButtonHTML = function(buttons, className) {
    let buttonHTML = "";
    for (let i = 0; i < buttons.length; i++) {
      const button = buttons[i];
      const isActive = globalSettings.preferences[button.key];
      if (className === "accessibility-filter" && globalSettings.preferences.colorScheme === button.key) {
        isActive = true;
      }
      buttonHTML += `
        <div class="accessibility-btn ${className || ""} ${isActive ? "accessibility-active" : ""}" 
             role="button" aria-pressed="false" data-key="${button.key}" 
             aria-label="${button.label}" title="${button.label}">
          <span class="material-icons">${button.icon}</span>${button.label}
        </div>`;
      iconSet.push(button.icon);
    }
    return buttonHTML;
  };

  const readabilityButtons = generateButtonHTML([
    { label: "Legible Font", key: "legible-font", icon: "local_parking" },
    { label: "Emphasize Links", key: "emphasize-links", icon: "link" },
    { label: "Emphasize Headings", key: "emphasize-headings", icon: "title" },
  ]);

  const colorSchemeButtons = generateButtonHTML([
    { label: "Grayscale", key: "grayscale", icon: "filter_b_and_w" },
    { label: "Desaturate", key: "desaturate", icon: "gradient" },
    { label: "Vibrant", key: "vibrant", icon: "filter_vintage" },
    { label: "High Contrast", key: "high-contrast", icon: "tonality" },
    { label: "Light Mode", key: "light-mode", icon: "brightness_5" },
    { label: "Dark Mode", key: "dark-mode", icon: "nightlight" },
  ], "accessibility-filter");

  const accessibilityToolButtons = generateButtonHTML([
    { label: "Large Cursor", key: "large-cursor", icon: "mouse" },
    { label: "Pause Animations", key: "pause-animations", icon: "motion_photos_off" },
    { label: "Reading Guide", key: "reading-guide", icon: "local_library" },
  ], "accessibility-tools");

  const widgetContainer = document.createElement("div");
  widgetContainer.innerHTML = `
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons&text=${iconSet.toString()}" rel="stylesheet">
    <style>
      /* CSS styles here - omitted for brevity */
    </style>
    <div class="accessibility-widget">
      <div class="accessibility-toggle" title="Open Accessibility Menu" role="button" aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="34px" height="34px">
          <path d="M0 0h24v24H0V0z" fill="none"/>
          <path d="M20.5 6c-2.61.7-5.67 1-8.5 1s-5.89-.3-8.5-1L3 8c1.86.5 4 .83 6 1v13h2v-6h2v6h2V9c2-.17 4.14-.5 6-1l-.5-2zM12 6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/>
        </svg>
      </div>
      <div class="accessibility-panel">
        <div class="accessibility-header">
          Accessibility Options
          <div>
            <div role="button" class="accessibility-reset" title="Reset Options">
              <span class="material-icons">restart_alt</span>
            </div>
            <div role="button" class="accessibility-close" title="Close Accessibility Menu">
              <span class="material-icons">close</span>
            </div>
          </div>
        </div>
        <div class="accessibility-content">
          <div class="accessibility-section">
            <div class="accessibility-section-title">Text Adjustments</div>
            <div class="font-size-adjuster">
              <div class="label">
                <span class="material-icons" style="margin-right:8px;">format_size</span>
                Adjust Text Size
              </div>
              <div>
                <div class="decrease-font" data-key="font-size" role="button" aria-pressed="false">
                  <span class="material-icons">remove</span>
                </div>
                <div class="font-size-display">${
                  globalSettings.preferences.fontSize && globalSettings.preferences.fontSize !== 1
                    ? `${parseInt(100 * globalSettings.preferences.fontSize)}%`
                    : "Default"
                }</div>
                <div class="increase-font" data-key="font-size" role="button" aria-pressed="false">
                  <span class="material-icons">add</span>
                </div>
              </div>
            </div>
            <div class="accessibility-options">${readabilityButtons}</div>
          </div>
          <div class="accessibility-section">
            <div class="accessibility-section-title">Color Adjustments</div>
            <div class="accessibility-options">${colorSchemeButtons}</div>
          </div>
          <div class="accessibility-section">
            <div class="accessibility-section-title">Accessibility Tools</div>
            <div class="accessibility-options">${accessibilityToolButtons}</div>
          </div>
        </div>
        <div class="accessibility-footer">
          <a href="">Accessibility by Example</a>
        </div>
      </div>
      <div class="accessibility-overlay"></div>
    </div>`;

  const injectStyles = function(styles, id) {
    let styleElement = document.getElementById(id || "") || document.createElement("style");
    styleElement.innerHTML = styles;
    if (!styleElement.id) {
      styleElement.id = id;
      document.head.appendChild(styleElement);
    }
  };

  const generateVendorPrefixes = function(value, property) {
    const prefixes = ["-o-", "-ms-", "-moz-", "-webkit-", ""];
    return prefixes.map(prefix => `${prefix}${property || "filter"}:${value};`).join("");
  };

  const applyColorScheme = function(scheme) {
    let styles = "";
    if (scheme) {
      let filterStyles = "";
      switch (scheme) {
        case "dark-mode":
          filterStyles = "color: #fff !important;fill: #FFF !important;background-color: #000 !important;";
          break;
        case "light-mode":
          filterStyles = "color: #000 !important;fill: #000 !important;background-color: #FFF !important;";
          break;
        case "high-contrast":
          filterStyles = generateVendorPrefixes("contrast(125%)");
          break;
        case "vibrant":
          filterStyles = generateVendorPrefixes("saturate(200%)");
          break;
        case "desaturate":
          filterStyles = generateVendorPrefixes("saturate(50%)");
          break;
        case "grayscale":
          filterStyles = generateVendorPrefixes("grayscale(100%)");
          break;
      }
      const elements = (scheme === "dark-mode" || scheme === "light-mode") 
        ? ["h1", "h2", "h3", "h4", "h5", "h6", "img", "p", "i", "svg", "a", "button", "label", "li", "ol"]
        : [""];
      elements.forEach(el => {
        styles += `[data-accessibility-filter="${scheme}"] ${el}{${filterStyles}}`;
      });
    }
    injectStyles(styles, "accessibility-filter-styles");
    scheme
      ? document.documentElement.setAttribute("data-accessibility-filter", scheme)
      : document.documentElement.removeAttribute("data-accessibility-filter");
  };

  const applyAccessibilityStyles = function() {
    const styleRules = [
      {
        id: "emphasize-headings",
        selectors: ["h1", "h2", "h3", "h4", "h5", "h6"],
        css: "outline: 2px solid #0048ff !important;outline-offset: 2px !important;",
      },
      {
        id: "emphasize-links",
        selectors: ["a[href]"],
        css: "outline: 2px solid #0048ff !important;outline-offset: 2px !important;",
      },
      {
        id: "legible-font",
        selectors: ["", "h1", "h2", "h3", "h4", "h5", "h6", "img", "p", "i", "svg", "a", "button", "label", "li", "ol"],
        css: "font-family: OpenDyslexic3,Comic Sans MS,Arial,Helvetica,sans-serif !important;",
      },
    ];

    let combinedStyles = "";
    styleRules.forEach(rule => {
      document.documentElement.classList.toggle(rule.id, !!globalSettings.preferences[rule.id]);
      if (globalSettings.preferences[rule.id]) {
        rule.selectors.forEach(selector => {
          combinedStyles += `.${rule.id} ${selector}{${rule.css}}`;
        });
      }
    });

    const readingGuide = document.querySelector(".accessibility-rg-container");
    if (globalSettings.preferences["reading-guide"]) {
      if (!readingGuide) {
        const guideElement = document.createElement("div");
        guideElement.setAttribute("class", "accessibility-rg-container");
        guideElement.innerHTML = `
          <style>
            .accessibility-rg {
              position: fixed;
              top: 0;
              left: 0;
              right: 0;
              width: 100%;
              height: 0;
              pointer-events: none;
              background-color: rgba(0,0,0,.5);
              z-index: 1000000;
            }
          </style>
          <div class="accessibility-rg accessibility-rg-top"></div>
          <div class="accessibility-rg accessibility-rg-bottom" style="top: auto;bottom: 0;"></div>
        `;
        const topGuide = guideElement.querySelector(".accessibility-rg-top");
        const bottomGuide = guideElement.querySelector(".accessibility-rg-bottom");
        const guideOffset = 20;
        
        window.onMoveReadingGuide = function(event) {
          topGuide.style.height = `${event.clientY - guideOffset}px`;
          bottomGuide.style.height = `${window.innerHeight - event.clientY - guideOffset - guideOffset}px`;
        };
        
        document.addEventListener("mousemove", window.onMoveReadingGuide, false);
        document.body.appendChild(guideElement);
      }
    } else if (readingGuide) {
      readingGuide.remove();
      document.removeEventListener("mousemove", window.onMoveReadingGuide);
    }

    if (globalSettings.preferences["pause-animations"]) {
      combinedStyles += `
        body * {
          ${generateVendorPrefixes("none !important", "transition")}
          ${generateVendorPrefixes("forwards !important", "animation-fill-mode")}
          ${generateVendorPrefixes("1 !important", "animation-iteration-count")}
          ${generateVendorPrefixes(".01s !important", "animation-duration")}
        }
      `;
    }

    if (globalSettings.preferences["large-cursor"]) {
      combinedStyles += `
        body * {
          cursor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='64' height='64' viewBox='0 0 512 512'%3E%3Cpath d='M429.742 319.31L82.49 0l-.231 471.744 105.375-100.826 61.89 141.083 96.559-42.358-61.89-141.083 145.549-9.25zM306.563 454.222l-41.62 18.259-67.066-152.879-85.589 81.894.164-333.193 245.264 225.529-118.219 7.512 67.066 152.878z' xmlns='http://www.w3.org/2000/svg'/%3E%3C/svg%3E") ,default !important;
        }
      `;
    }

    if (globalSettings.preferences["legible-font"]) {
      combinedStyles += `
        @font-face {
          font-family: OpenDyslexic3;
          src: url("https://website-widgets.pages.dev/fonts/OpenDyslexic3-Regular.woff") format("woff"),
               url("https://website-widgets.pages.dev/fonts/OpenDyslexic3-Regular.ttf") format("truetype");
        }
      `;
    }

    injectStyles(combinedStyles, "accessibility-content-styles");
  };

  const handleOptionToggle = function(event) {
    event.preventDefault();
    const target = event.currentTarget;
    const key = target.dataset.key;

    if (target.classList.contains("accessibility-filter")) {
      document.querySelectorAll(".accessibility-filter").forEach(el => {
        el.classList.remove("accessibility-active");
        el.setAttribute("aria-pressed", "false");
      });
      globalSettings.preferences.colorScheme = globalSettings.preferences.colorScheme !== key ? key : null;
      if (globalSettings.preferences.colorScheme) {
        target.classList.add("accessibility-active");
        target.setAttribute("aria-pressed", "true");
      }
      applyColorScheme(globalSettings.preferences.colorScheme);
    } else {
      globalSettings.preferences[key] = !globalSettings.preferences[key];
      target.classList.toggle("accessibility-active", globalSettings.preferences[key]);
      target.setAttribute("aria-pressed", globalSettings.preferences[key] ? "true" : "false");
      applyAccessibilityStyles();
    }
    savePreferences();
  };

  const adjustFontSize = function(event, size) {
    let newSize = size;
    if (!size && event) {
      const target = event.currentTarget;
      newSize = parseFloat(globalSettings.preferences.fontSize) || 1;
      newSize += target.classList.contains("decrease-font") ? -0.1 : 0.1;
      newSize = Math.max(Math.min(newSize, 2), 0.1);
      newSize = parseFloat(newSize.toFixed(2));
    }

    document.querySelectorAll("h1,h2,h3,h4,h5,h6,p,a,dl,dt,li,ol,th,td,span").forEach(el => {
      if (!el.classList.contains("material-icons")) {
        let originalSize = el.getAttribute("data-accessibility-originalFontSize");
        if (!originalSize) {
          originalSize = parseInt(window.getComputedStyle(el, null).getPropertyValue("font-size"));
          el.setAttribute("data-accessibility-originalFontSize", originalSize);
        }
        el.style.fontSize = `${originalSize * newSize}px`;
      }
    });

    let sizeDisplay = "Default";
    if (newSize !== 1) {
      sizeDisplay = `${newSize > 1 ? "+" : "-"}${Math.abs(parseInt((newSize - 1) * 100))}%`;
    }
    
    if (event) {
      event.currentTarget.parentElement.querySelector(".font-size-display").innerHTML = sizeDisplay;
    }
    globalSettings.preferences.fontSize = newSize;
  };

  const accessibilityPanel = widgetContainer.querySelector(".accessibility-panel");
  const accessibilityOverlay = widgetContainer.querySelector(".accessibility-overlay");

  widgetContainer.querySelector(".accessibility-toggle").addEventListener("click", function() {
    const isVisible = accessibilityPanel.style.display === "block";
    accessibilityPanel.style.display = isVisible ? "none" : "block";
    accessibilityOverlay.style.display = accessibilityPanel.style.display;
  }, false);

  accessibilityPanel.querySelector(".accessibility-close").addEventListener("click", function() {
    accessibilityPanel.style.display = "none";
    accessibilityOverlay.style.display = "none";
  }, false);

  accessibilityOverlay.addEventListener("click", function() {
    accessibilityPanel.style.display = "none";
    accessibilityOverlay.style.display = "none";
  }, false);

  accessibilityPanel.querySelector(".accessibility-reset").addEventListener("click", function() {
    globalSettings.preferences = {};
    applyColorScheme();
    applyAccessibilityStyles();
    adjustFontSize(null, 1);
    accessibilityPanel.querySelectorAll(".accessibility-btn").forEach(el => {
      el.classList.remove("accessibility-active");
      el.setAttribute("aria-pressed", "false");
    });
    accessibilityPanel.querySelectorAll(".font-size-display").forEach(el => {
      el.innerHTML = "Default";
    });
    savePreferences();
  }, false);

  accessibilityPanel.querySelectorAll(".accessibility-btn").forEach(el => {
    el.addEventListener("click", handleOptionToggle, false);
  });

  accessibilityPanel.querySelectorAll(".font-size-adjuster div[role='button']").forEach(el => {
    el.addEventListener("click", event => {
      adjustFontSize(event);
      savePreferences();
    }, false);
  });

  document.body.appendChild(widgetContainer);

  if (Object.keys(storedPreferences).length > 0) {
    applyAccessibilityStyles();
    if (globalSettings.preferences.fontSize !== 1) {
      adjustFontSize(null, globalSettings.preferences.fontSize);
    }
    if (globalSettings.preferences.colorScheme) {
      applyColorScheme(globalSettings.preferences.colorScheme);
    }
  }
});