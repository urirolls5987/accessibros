/**
 * Accessibility Widget Initialization Script
 * This script manages the state and behavior of an accessibility widget 
 * for font sizes, color adjustments, tools, and various content settings using cookies.
 */
document.addEventListener("DOMContentLoaded", function () {
  
  // Initial state for the widget
  let widgetState = { states: {} };

  /**
   * Save the widget state to a cookie
   */
  const saveStateToCookie = function () {
    const setCookie = function (stateObject) {
      const expirationDate = new Date();
      expirationDate.setTime(expirationDate.getTime() + (365 * 24 * 60 * 60 * 1000)); // Set the cookie to expire in 1 year
      const expires = "expires=" + expirationDate.toUTCString();
      document.cookie = "accessibility_widget=" + JSON.stringify(stateObject) + ";" + expires + ";path=/";
    };
    setCookie(widgetState);
  };

  /**
   * Load the widget state from the cookie
   * @returns {Object} Parsed widget state from the cookie or an empty object
   */
  const loadStateFromCookie = function () {
    const cookieName = "accessibility_widget=";
    const cookies = decodeURIComponent(document.cookie).split(";");

    for (let i = 0; i < cookies.length; i++) {
      let cookie = cookies[i].trim();
      if (cookie.indexOf(cookieName) === 0) {
        return JSON.parse(cookie.substring(cookieName.length, cookie.length));
      }
    }
    return {};
  };

  // Load saved state from the cookie, fallback to default state if unavailable
  try {
    widgetState = { states: {}, ...loadStateFromCookie() };
  } catch (error) {
    console.error("Error parsing widget state from cookie:", error);
  }

  // Predefined icons used in the widget
  const buttonIcons = ["format_size", "add", "remove", "restart_alt", "close"];

  /**
   * Generate HTML for the buttons in the widget
   * @param {Array} buttons - Array of button configurations (label, key, icon)
   * @param {String} additionalClass - Additional class for buttons (e.g., "asw-filter")
   * @returns {String} - HTML string for the buttons
   */
  const generateButtonHTML = function (buttons, additionalClass = "") {
    return buttons.map(({ label, key, icon }) => {
      const isSelected = widgetState.states[key] ? "asw-selected" : "";
      return `
        <div class="asw-btn ${additionalClass} ${isSelected}" 
             role="button" aria-pressed="${isSelected ? 'true' : 'false'}" 
             data-key="${key}" title="${label}">
          <span class="material-icons">${icon}</span>${label}
        </div>`;
    }).join("");
  };

  // Generate button HTML for content adjustments, color adjustments, and tools
  const contentAdjustmentButtons = generateButtonHTML([
    { label: "Readable Font", key: "readable-font", icon: "local_parking" },
    { label: "Highlight Links", key: "highlight-links", icon: "link" },
    { label: "Highlight Title", key: "highlight-title", icon: "title" }
  ]);

  const colorAdjustmentButtons = generateButtonHTML([
    { label: "Monochrome", key: "monochrome", icon: "filter_b_and_w" },
    { label: "Low Saturation", key: "low-saturation", icon: "gradient" },
    { label: "High Saturation", key: "high-saturation", icon: "filter_vintage" },
    { label: "High Contrast", key: "high-contrast", icon: "tonality" },
    { label: "Light Contrast", key: "light-contrast", icon: "brightness_5" },
    { label: "Dark Contrast", key: "dark-contrast", icon: "nightlight" }
  ], "asw-filter");

  const toolButtons = generateButtonHTML([
    { label: "Big Cursor", key: "big-cursor", icon: "mouse" },
    { label: "Stop Animations", key: "stop-animations", icon: "motion_photos_off" },
    { label: "Reading Guide", key: "readable-guide", icon: "local_library" }
  ], "asw-tools");

  // Create the widget container and populate it with content
  const widgetContainer = document.createElement("div");
  widgetContainer.innerHTML = `
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons&text=${buttonIcons.join(',')}" rel="stylesheet">
    <style>
      .asw-menu {
        font-family: "Inter";
        position: fixed;
        right: 20px;
        top: 20px;
        border-radius: 8px;
        box-shadow: 0px 0px 20px #00000080;
        opacity: 1;
        transition: 0.3s;
        z-index: 500000;
        overflow: hidden;
        background: #f9f9f9;
        width: 500px;
        line-height: 1;
        font-size: 16px;
        letter-spacing: 0.015em;
        height: calc(100% - 40px - 75px);
        color: #000;
      }

      .asw-menu-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-left: 18px;
        height: 60px;
        font-size: 18px;
        font-weight: 700;
        border-bottom: 1px solid #dedede;
        color: #000;
      }

      .asw-menu-header > div {
        display: flex;
      }

      .asw-menu-header div[role="button"] {
        padding: 12px;
        cursor: pointer;
        color: #000;
      }

      .asw-menu-header div[role="button"]:hover {
        opacity: 0.8;
        color: #000;
      }

      .asw-card {
        margin: 0 15px 30px;
      }

      .asw-items {
        display: grid;
        grid-template-columns: repeat(3, minmax(0, 1fr));
        gap: 1rem;
      }

      .asw-btn {
        aspect-ratio: 6 / 5;
        border-radius: 4px;
        padding: 0 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;
        color: #333;
        font-size: 16px !important;
        background: #fff;
        border: 1px solid #dedede;
        transition: all 0.3s ease;
        cursor: pointer;
        line-height: 1.4;
      }

      .asw-btn .asw-translate {
        font-size: 15px !important;
      }

      .asw-btn .material-icons {
        margin-bottom: 16px;
      }

      .asw-btn:hover {
        border-color: #419d4a;
      }

      .asw-btn.asw-selected {
        background: #419d4a;
        color: white;
        border-color: #419d4a;
      }

      .asw-menu-content {
        overflow-y: scroll;
        max-height: calc(100% - 80px);
        color: #333;
        padding: 15px 0;
      }

      .asw-widget,
      .asw-menu {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        font-weight: 400;
        -webkit-font-smoothing: antialiased;
      }

      .asw-widget *,
      .asw-menu * {
        box-sizing: border-box;
      }

      .asw-menu-btn {
        position: fixed;
        z-index: 500000;
        right: 20px;
        bottom: 20px;
        background: #419d4a;
        box-shadow: 0 5px 15px 0 rgb(37 44 97 / 15%), 0 2px 4px 0 rgb(93 100 148 / 20%);
        transition: 0.3s;
        border-radius: 50%;
        align-items: center;
        justify-content: center;
        transform: scale(1);
        width: 54px;
        height: 54px;
        display: flex;
        cursor: pointer;
        border: 4px solid white;
        outline: 4px solid #419d4a;
        text-decoration: none;
      }

      .asw-menu-btn:hover {
        transform: scale(1.1);
      }

      .material-icons.md-36.white {
        font-size: 36px;
        color: #f9f9f9;
      }

      @media only screen and (max-width: 560px) {
        .asw-menu-btn {
          width: 38px;
          height: 38px;
        }

        .asw-menu-btn svg {
          width: 24px;
          height: 24px;
          min-height: 24px;
          min-width: 24px;
          max-width: 24px;
          max-height: 24px;
        }
      }

      @media only screen and (max-width: 560px) {
        .asw-menu {
          width: calc(100% - 20px);
          left: 10px;
        }
      }

      @media only screen and (max-width: 420px) {
        .asw-items {
          grid-template-columns: repeat(2, minmax(0, 1fr));
          gap: 0.5rem;
        }

        .asw-menu {
          width: calc(100% - 20px);
          left: 10px;
        }
      }

      @font-face {
        font-family: "OpenDyslexic3";
        src: url("https://website-widgets.pages.dev/fonts/OpenDyslexic3-Regular.woff") format("woff"),
             url("https://website-widgets.pages.dev/fonts/OpenDyslexic3-Regular.ttf") format("truetype");
      }
    </style>
    <div class="asw-widget">
      <div class="asw-menu-btn" title="Open Accessibility Menu" role="button" aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" style="width:34px;height:34px;" viewBox="0 0 24 24">
          <path d="M0 0h24v24H0V0z" fill="none"/>
          <path d="M20.5 6c-2.61.7-5.67 1-8.5 1s-5.89-.3-8.5-1L3 8c1.86.5 4 .83 6 1v13h2v-6h2v6h2V9c2-.17 4.14-.5 6-1l-.5-2zM12 6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/>
        </svg>
      </div>
      <div class="asw-menu">
        <div class="asw-menu-header">
          Accessibility Menu
          <div>
            <div role="button" class="asw-menu-reset" title="Reset Settings">
              <span class="material-icons">restart_alt</span>
            </div>
            <div role="button" class="asw-menu-close" title="Close Accessibility Menu">
              <span class="material-icons">close</span>
            </div>
          </div>
        </div>
        <div class="asw-menu-content">
          <div class="asw-card">
            <div class="asw-card-title">Content Adjustments</div>
            <div class="asw-items">${contentAdjustmentButtons}</div>
          </div>
          <div class="asw-card">
            <div class="asw-card-title">Color Adjustments</div>
            <div class="asw-items">${colorAdjustmentButtons}</div>
          </div>
          <div class="asw-card">
            <div class="asw-card-title">Tools</div>
            <div class="asw-items">${toolButtons}</div>
          </div>
        </div>
        <div class="asw-footer"><a href="#">Brightways</a></div>
      </div>
      <div class="asw-overlay"></div>
    </div>
  `;

  // Attach event listeners to widget buttons and elements
  widgetContainer.querySelector(".asw-menu-btn").addEventListener("click", function () {
    const menu = widgetContainer.querySelector(".asw-menu");
    const overlay = widgetContainer.querySelector(".asw-overlay");
    menu.style.display = (menu.style.display === "block") ? "none" : "block";
    overlay.style.display = (menu.style.display === "block") ? "block" : "none";
  });

  widgetContainer.querySelector(".asw-menu-reset").addEventListener("click", function () {
    widgetState.states = {}; // Reset the state
    saveStateToCookie(); // Save the reset state
  });

  widgetContainer.querySelector(".asw-menu-close").addEventListener("click", function () {
    widgetContainer.querySelector(".asw-menu").style.display = "none";
    widgetContainer.querySelector(".asw-overlay").style.display = "none";
  });

  // Append the widget container to the document body
  document.body.appendChild(widgetContainer);

});
